package main

import (
	"flag"
	"fmt"
	"os"
	"path/filepath"

	autodocument "github.com/yusufguntav/autodoc"
)

func main() {
	// Komut satırı parametrelerini tanımla
	outputFile := flag.String("output", "", "Dokümantasyonu belirtilen dosyaya kaydet (boş bırakılırsa konsola yazdırır)")
	customBranch := flag.String("branch", "", "Belirli bir dalı kullan (boş bırakılırsa mevcut dal kullanılır)")

	// Parametreleri ayrıştır
	flag.Parse()

	var doc string
	var err error

	// Belirli bir dal belirtilmişse özel bir fonksiyon kullan
	if *customBranch != "" {
		// Dalı belirterek commit'leri al
		commits, err := autodocument.GetCommits(*customBranch)
		if err != nil {
			fmt.Printf("Error fetching commits: %v\n", err)
			os.Exit(1)
		}

		// Dokümantasyon oluştur
		doc = autodocument.SendMessageAI(commits)
	} else {
		// Varsayılan yöntemi kullan
		doc, err = autodocument.GenerateDocumentation()
		if err != nil {
			fmt.Printf("Error generating documentation: %v\n", err)
			os.Exit(1)
		}
	}

	// Dosyaya kaydetme veya konsola yazdırma
	if *outputFile != "" {
		// Dosya dizinini oluştur (gerekirse)
		dir := filepath.Dir(*outputFile)
		if dir != "." {
			if err := os.MkdirAll(dir, 0755); err != nil {
				fmt.Printf("Error creating directory: %v\n", err)
				os.Exit(1)
			}
		}

		// Dosyaya yaz
		err = os.WriteFile(*outputFile, []byte(doc), 0644)
		if err != nil {
			fmt.Printf("Error writing to file: %v\n", err)
			os.Exit(1)
		}
		fmt.Printf("Documentation saved to %s\n", *outputFile)
	} else {
		// Konsola yazdır
		fmt.Println("Document generated by AI:")
		fmt.Println(doc)
	}
}
